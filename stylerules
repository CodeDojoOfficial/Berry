===============================================================================
=           B e r r y   S t y l e   R u l e s     -     Version 1.1           =
===============================================================================

     Welcome to the Berry Styling Guidlines Cheatsheet for getting the
     most readability out of your code! These guidlines will even help you
     in the long run, when you need to make a tiny edit, but don't know
     where to place it!

     These guidlines will go over comments. So if you already know how to
     use comments in Berry, skip lesson 1.1.

     Move onto lesson 1.1 to start your standard styling journey!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 1.1: COMMENTS

     In this lesson, as stated by the title, you will be learning how to
     write comments in your code, so that you can explain to your reader
     (that's you!) how your code works. It may seem silly, but it is
     important to write comments when you work; especially in Berry,
     because every character has it's own defined action!

     In Berry, there is no specific character or series of characters used
     to define a comment. Seeing as there are only 8 command characters,
     it's seems kind of silly. Just avoid the 8 command characters in your
     comments, and you will be good!

          This is a proper comment

          This is a comment that has a command character in it.

     The first line is a comment that has no command characters in it. The
     second line, however, has the period/dot/full stop character at the
     end. This is a command character. It is used to print the value in
     the current cell.

     Move onto lesson 1.2 to learn about the "Spacing Rule."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                         Lesson 1.2: THE SPACING RULE

     In this lesson, you will learn about the spacing rule. It effects
     just the cell value changes, but can be applied to focus changes.

     The spacing rule states that you can have at maximum 5 units of the
     same kind in one section. Let's look at an example, and we will
     explain it afterward.
          
          ++++++++++ 10 additions

          +++++ +++++ 10 more obvious additions

     In the first line, you can see 10 pluses. But you only know that if
     you count or read the comment. If you apply the spacing rule at 5
     units, you will get the second line. It's a little more obvious
     knowing that each section is grouped as 5, kind of like tallies.
     
     Note that you can use this rule and break it down into 4 or even 3 in
     each group of commands.

     Move onto lesson 1.3 to learn about the "Length Rule."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                         Lesson 1.3: THE LENGTH RULE

     In this lesson, you will learn about the length rule. It effects the
     number of command characters in a line.

     The length rule states that you can have, at maximum, 80 characters,
     command or comment, in each line. This does not effect possible tabs
     or spaces before any actual code.

     Move onto lesson 1.4 to learn about formatting loops.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        Lesson 1.4: FORMATTING LOOPS

     In this lesson you will learn how to format loops. This is
     especially important because this formatting rule is only true 50% of
     the time. So this lesson will be split into two parts. Part 1: Opened
     loops. Part 2: Inline loops (the exception to this rule).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Lesson 1.4.1: FORMATTING LOOPS: OPENED LOOPS

     An opened loop is defined as one that is "unfolded," as most IDEs
     like to call it. Below is an example of an opened loop.
          
          [
            < +++
            > -
          ]
          
     In this block of code, you create a loop, but then use it almost as
     if it were a method from another language, you enter and indent. This
     is called an opened loop.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Lesson 1.4.2: FORMATTING LOOPS: INLINE LOOPS

     An inline loop, as the name suggests, is a loop that is in a straight
     line of code. It is not indented. Although this is the exception to
     the loops formatting rule, it still has some rules, for readability
     sake.

     The code below shows two inline loops that take user input, and
     multiply it by 2.
          
          > , > ++++ [ < ---- ---- > - ] < [ < ++ > - ] < .

     In this code, you can see the loops clearly. But do you notice
     anything about the area around the brackets? Thats right. There must
     be a space on each side of each bracket to make for better
     readability.

     Move onto Lesson 1 Summary to conclude this lesson.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Lesson 1 SUMMARY
     
     Below is the list of things you learned about in this lesson.

  1. How to comment correctly
  
  2. How to make cell edits more readable

  3. How to format loops correctly
     
     In the next few versions, these guidlines will be added upon.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
       Copyright (c) 2018 by CodeDojo and/or it's individual developers.
                              All rights reserved.
                 This project is protected under the MIT license.
     
     This file was written by Adrian Gjerstad, the creator of the Berry
     programming language. If you would like to contribute, go to
          
          https://github.com/CodeDojoOfficial/Berry/issues/new/choose

     This takes you to a submit an issue page, but it still means the same
     thing. Bye!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
